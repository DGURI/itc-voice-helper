# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build-frontend:
    docker:
      # specify the version you desire here
      - image: circleci/node:8.12.0
    environment:
      CI: false
    working_directory: ~/repo/itc-helper-frontend
    steps:
      - checkout:
          path: ~/repo
      - attach_workspace:
          at: ~/repo
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run: yarn build
      # - store_artifacts:
      #     path: ~/repo/velog-frontend/build
      - persist_to_workspace:
          root: ~/repo
          paths:
            - itc-helper-frontend/build
  deploy-frontend:
    docker:
      - image: circleci/python:2.7-jessie
    working_directory: ~/repo/itc-helper-frontend
    steps:
      - checkout:
          path: ~/repo
      - attach_workspace:
          at: ~/repo
      - run: sudo pip install awscli
      - run: aws s3 sync ./build s3://itc-helper.dguri.io/
      - run: aws cloudfront create-invalidation --distribution-id E165QUCR4GAWMG --paths / /index.html /error.html /service-worker.js /manifest.json /favicon.ico
  deploy-backend:
    docker:
      - image: circleci/node:8.12.0
    working_directory: ~/repo/itc-helper-backend
    steps:
      - checkout:
          path: ~/repo
      - attach_workspace:
          at: ~/repo
      - restore_cache:
          keys:
            - v1-backend-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-backend-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-backend-dependencies-{{ checksum "package.json" }}
      - run: yarn deploy
  build-crawler:
    docker:
      - image: circleci/node:8.12.0
    working_directory: ~/repo/itc-helper-crawler
    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker
      - attach_workspace:
          at: ~/repo
      - restore_cache:
          keys:
            - v1-crawler-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-crawler-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-crawler-{{ checksum "package.json" }}
      - run:
          name: Make the executable
          command: |
            yarn build
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Build image
          command: |
            docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $FULL_IMAGE_NAME
      - persist_to_workspace:
          root: ~/repo
          paths:
            - itc-helper-crawler/docker-image
  deploy-crawler:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo/itc-helper-crawler
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker
      - attach_workspace:
          at: ~/repo
      - restore_cache:
          key: v1-{{ checksum "requirements.txt" }}
      - run:
          name: Install awscli
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: v1-{{ checksum "requirements.txt" }}
          paths:
            - 'venv'
      - run:
          name: Load image
          command: |
            docker load --input docker-image/image.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export ECS_CLUSTER_NAME="${AWS_RESOURCE_NAME_PREFIX}_ecs_cluster"' >> $BASH_ENV
            echo 'export ECS_SERVICE_NAME="${AWS_RESOURCE_NAME_PREFIX}_ecs_service"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            . venv/bin/activate
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$CIRCLE_SHA1
      - run:
          name: Deploy
          command: |
            . venv/bin/activate
            export ECS_TASK_FAMILY_NAME="${AWS_RESOURCE_NAME_PREFIX}_ecs_service"
            export ECS_CONTAINER_DEFINITION_NAME="${AWS_RESOURCE_NAME_PREFIX}_ecs_service"
            export EXECUTION_ROLE_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:role/${AWS_RESOURCE_NAME_PREFIX}_ecs_task_execution_role"
            export NODE_ENV="${NODE_ENV}"
            export DYNAMODB_TABLE_ACCESS_TOKEN="${DYNAMODB_TABLE_ACCESS_TOKEN}"
            export DYNAMODB_TABLE_REFRESH_TOKEN="${DYNAMODB_TABLE_REFRESH_TOKEN}"
            export DYNAMODB_TABLE_AUTHORIZATION_CODE="${DYNAMODB_TABLE_AUTHORIZATION_CODE}"
            export DYNAMODB_TABLE_USER="${DYNAMODB_TABLE_USER}"
            export DYNAMODB_TABLE_SUBJECT="${DYNAMODB_TABLE_SUBJECT}"
            export DYNAMODB_TABLE_REPORT="${DYNAMODB_TABLE_REPORT}"
            export DYNAMODB_TABLE_DEPARTMENT="${DYNAMODB_TABLE_DEPARTMENT}"
            export SQS_QUEUE_URL="${SQS_QUEUE_URL}"
            export KMS_KEY_ID="${KMS_KEY_ID}"
            export SECRET_KEY="${SECRET_KEY}"
            export PUPPETEER_CLUSTER_HEADLESS="${PUPPETEER_CLUSTER_HEADLESS}"
            export PUPPETEER_CLUSTER_MONITOR="${PUPPETEER_CLUSTER_MONITOR}"
            chmod +x ./deploy.sh
            ./deploy.sh
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-frontend:
          filters:
            branches:
              only: master
      - deploy-frontend:
          filters:
            branches:
              only: master
          requires:
            - build-frontend
      - deploy-backend:
          filters:
            branches:
              only: master
      - build-crawler:
          filters:
            branches:
              only: master
      - deploy-crawler:
          filters:
            branches:
              only: master
          requires:
            - build-crawler
